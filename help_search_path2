    public void help_search_path2(){

	ArrayList<Integer> michihaba_width = new ArrayList<Integer>();
	ArrayList<Integer> risk_list = new ArrayList<Integer>();
	ArrayList<Integer> index_list = new ArrayList<Integer>();
	ArrayList<Integer> cost_list = new ArrayList<Integer>();
	int haba = 0;
	int michihaba_max =0,risk_min = 0,cost_min = 0;
	Astar_Map m1 = a_map;
	Astar_Map m2 = a_map;
	int count =0;
	int risk_num = 0;
	int risk_range = 3;//
	int cost_range = 3;
	char[][] new_map = new char[aStar.map_height][aStar.map_width];

	//道幅と危険度計算
	while(true){
	    if(m1 ==null) break;

	    for(int i=0;i<m1.p_list.size();i++){
		haba += m1.p_list.get(i).michihaba;
		risk_num += m1.p_list.get(i).risk;
	    }
	    cost_list.add(m1.p_list.size());
	    michihaba_width.add(haba);
	    risk_list.add(risk_num);

	    haba = 0;
	    risk_num = 0;
	    m1 = m1.p_node;
	}

	//危険度の最小値を出す
	risk_min = risk_list.get(0);
	for(int i = 0;i<risk_list.size();i++){
	    if(risk_min > risk_list.get(i)){
		risk_min = risk_list.get(i);
	    }
	}

	//道のりのコストの最小値を調べる
	cost_min = cost_list.get(0);
	for(int i = 0;i<cost_list.size();i++){
	    if(cost_min > cost_list.get(i)&&risk_list.get(i)<= risk_min+risk_range){
		cost_min = cost_list.get(i);
	    }
	}

	//危険度が低く、より最短経路よりの道を探す
	for(int i = 0;i<cost_list.size();i++){
	    if( cost_list.get(i)<=cost_min+cost_range && risk_list.get(i)<=risk_min+risk_range){
		index_list.add(i);
	    }
	}
	
	//上記で選んだ道の候補の中で道幅が最も大きいものを選ぶ
	michihaba_max = michihaba_width.get(index_list.get(0));
	for(int i = 0;i<index_list.size();i++){
	    if(michihaba_max <= michihaba_width.get(index_list.get(i))){
		michihaba_max = michihaba_width.get(index_list.get(i));
	    }
	}

	//上記で選んだ最良の道を選ぶ
	for(int i = 0;i<michihaba_width.size();i++){
	    if(michihaba_max == michihaba_width.get(index_list.get(i)) &&
	       cost_min == cost_list.get(i) && 
	       risk_list.get(i)<= risk_min+risk_range){

		count = i;
	    }
	}

	while(count >0){
	    m2 = m2.p_node;
	    count--;
	}   
	
	
	//map informatin making
	for (int i = 0; i < aStar.map_height; i++) {
	    for (int j = 0; j < aStar.map_width; j++) {
		new_map[i][j] = aStar.aStarmap[i][j];
	    }
	}	

	for(int i = 0;i<m2.p_list.size();i++){
	    new_map[m2.p_list.get(i).pos[1]][m2.p_list.get(i).pos[0]] = '+'; 
	}

	for (int i = 0; i < aStar.map_height; i++) {
	    for (int j = 0; j < aStar.map_width; j++) {
		startgoal_timelimit.map_result[i][j] = new_map[i][j];
	    }
	}



	/*ファイルへの書き出し
	try{
		File file = new File("./text5.txt");
  
		if (checkBeforeWritefile(file)){
		  FileWriter filewriter = new FileWriter(file);
		  for (int i = 0; i < aStar.map_height; i++) {
			for (int j = 0; j < aStar.map_width; j++) {
				String s = String.valueOf(new_map[i][j]);
				filewriter.write(s);
			}
			filewriter.write("\r\n");
		  }
		  filewriter.close();
		}else{
		  System.out.println("ファイルに書き込めません");
		}
	}catch(IOException e){
		System.out.println(e);
	}*/



	/*
	System.out.println("新しい道幅考慮したマップ:");
	for (int i = 0; i < aStar.map_height; i++) {
	String s = String.valueOf(new_map[i]);
	System.out.println(s);
	}*/

	}
